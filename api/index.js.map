{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/context.tsx", "../app/createEmotionCache.ts", "C:\\Users\\tree\\Desktop\\jira-remix-app\\app\\root.tsx", "../app/components/ui/Navbar.tsx", "../app/theme/theme.ts", "../app/context/entries/EntriesContext.tsx", "../app/context/entries/EntriesProvider.tsx", "../app/context/entries/EntriesReducer.ts", "C:\\Users\\tree\\Desktop\\jira-remix-app\\app\\routes\\entry\\$id.tsx", "../app/models/Entry.ts", "../app/utils/db.ts", "C:\\Users\\tree\\Desktop\\jira-remix-app\\app\\routes\\index.tsx", "../app/components/entries/EntryList.tsx", "../app/components/entries/EntryCard.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "// entry.server.tsx\r\nimport { renderToString } from \"react-dom/server\";\r\nimport { CacheProvider } from \"@emotion/react\";\r\nimport createEmotionServer from \"@emotion/server/create-instance\";\r\nimport type { EntryContext } from \"@remix-run/node\";\r\nimport { RemixServer } from \"@remix-run/react\";\r\n\r\nimport { ServerStyleContext } from \"./context\";\r\nimport createEmotionCache from \"./createEmotionCache\";\r\n\r\nexport default function handleRequest(\r\n  request: Request,\r\n  responseStatusCode: number,\r\n  responseHeaders: Headers,\r\n  remixContext: EntryContext\r\n) {\r\n  const cache = createEmotionCache();\r\n  const { extractCriticalToChunks } = createEmotionServer(cache);\r\n\r\n  const html = renderToString(\r\n    <ServerStyleContext.Provider value={null}>\r\n      <CacheProvider value={cache}>\r\n        <RemixServer context={remixContext} url={request.url} />\r\n      </CacheProvider>\r\n    </ServerStyleContext.Provider>\r\n  );\r\n\r\n  const chunks = extractCriticalToChunks(html);\r\n\r\n  const markup = renderToString(\r\n    <ServerStyleContext.Provider value={chunks.styles}>\r\n      <CacheProvider value={cache}>\r\n        <RemixServer context={remixContext} url={request.url} />\r\n      </CacheProvider>\r\n    </ServerStyleContext.Provider>\r\n  );\r\n\r\n  responseHeaders.set(\"Content-Type\", \"text/html\");\r\n\r\n  return new Response(`<!DOCTYPE html>${markup}`, {\r\n    status: responseStatusCode,\r\n    headers: responseHeaders,\r\n  });\r\n}\r\n", "// context.tsx\r\nimport { createContext } from \"react\";\r\n\r\nexport interface ServerStyleContextData {\r\n  key: string;\r\n  ids: Array<string>;\r\n  css: string;\r\n}\r\n\r\nexport const ServerStyleContext = createContext<\r\n  ServerStyleContextData[] | null\r\n>(null);\r\n\r\nexport interface ClientStyleContextData {\r\n  reset: () => void;\r\n}\r\n\r\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\r\n  null\r\n);\r\n", "// createEmotionCache.ts\r\nimport createCache from \"@emotion/cache\"\r\n\r\nexport default function createEmotionCache() {\r\n  return createCache({ key: \"css\" })\r\n}\r\n", "import type { MetaFunction } from \"@remix-run/node\";\r\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from \"@remix-run/react\";\r\nimport { useContext, useEffect } from \"react\"\r\nimport type { ReactNode } from \"react\";\r\nimport { withEmotionCache } from \"@emotion/react\"\r\nimport { ChakraProvider } from \"@chakra-ui/react\"\r\n\r\nimport { ServerStyleContext, ClientStyleContext } from \"./context\"\r\nimport { Navbar } from \"./components/ui\"\r\nimport { theme } from \"./theme\"\r\nimport { EntriesProvider } from \"./context/entries\"\r\n\r\ninterface DocumentProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const meta: MetaFunction = () => {\r\n  return { title: \"Jira App\" }\r\n}\r\n\r\nconst Document = withEmotionCache(\r\n  ({ children }: DocumentProps, emotionCache) => {\r\n    const serverSyleData = useContext(ServerStyleContext)\r\n    const clientStyleData = useContext(ClientStyleContext)\r\n\r\n    // Only executed on client\r\n    useEffect(() => {\r\n      // re-link sheet container\r\n      emotionCache.sheet.container = document.head\r\n      // re-inject tags\r\n      const tags = emotionCache.sheet.tags\r\n      emotionCache.sheet.flush()\r\n      tags.forEach((tag) => {\r\n        ;(emotionCache.sheet as any)._insertTag(tag)\r\n      })\r\n      // reset cache to reapply global styles\r\n      clientStyleData?.reset()\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n      <html lang=\"en\">\r\n        <head>\r\n          <meta charSet=\"utf-8\" />\r\n          <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\r\n          <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n          <link rel=\"preconnect\" href=\"https://fonts.gstaticom\" />\r\n          <link\r\n            href=\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap\"\r\n            rel=\"stylesheet\"\r\n          />\r\n          <Meta />\r\n          <Links />\r\n          {serverSyleData?.map(({ key, ids, css }) => (\r\n            <style\r\n              key={key}\r\n              data-emotion={`${key} ${ids.join(\" \")}`}\r\n              dangerouslySetInnerHTML={{ __html: css }}\r\n            />\r\n          ))}\r\n        </head>\r\n        <body>\r\n          {children}\r\n          <ScrollRestoration />\r\n          <Scripts />\r\n          <LiveReload />\r\n        </body>\r\n      </html>\r\n    )\r\n  }\r\n)\r\n\r\nexport default function App() {\r\n  return (\r\n    <Document>\r\n      <EntriesProvider>\r\n        <ChakraProvider theme={theme}>\r\n          <Navbar />\r\n          <Outlet />\r\n        </ChakraProvider>\r\n      </EntriesProvider>\r\n    </Document>\r\n  )\r\n}\r\n", "import { Box, Text } from \"@chakra-ui/react\"\r\nimport { Link } from \"@remix-run/react\";\r\n\r\ntype Props = {}\r\n\r\nconst Navbar = (props: Props) => {\r\n  return (\r\n    <Box bg=\"gray.900\" w=\"100%\" h=\"56px\" as=\"header\">\r\n      <Box\r\n        as=\"nav\"\r\n        display=\"flex\"\r\n        justifyContent=\"flex-start\"\r\n        px=\"8\"\r\n        alignItems=\"center\"\r\n        h=\"100%\"\r\n      >\r\n        <Box as=\"ul\" display=\"flex\" gap=\"22px\" listStyleType=\"none\">\r\n          <Box as=\"li\">\r\n            <Link to=\"/\">\r\n              <Text fontSize=\"2xl\">Open Jira</Text>\r\n            </Link>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n", "// theme.js\r\n\r\n// 1. import `extendTheme` function\r\nimport { extendTheme } from \"@chakra-ui/react\"\r\nimport type { ThemeConfig } from \"@chakra-ui/react\"\r\n\r\n// 2. Add your color mode config\r\nconst config: ThemeConfig = {\r\n  initialColorMode: \"dark\",\r\n  useSystemColorMode: false,\r\n}\r\n\r\n// 3. extend the theme\r\nconst theme = extendTheme({ config })\r\n\r\nexport default theme\r\n", "import { createContext } from \"react\"\r\n\r\nexport type Entry = {\r\n  _id: string\r\n  description: string\r\n  status: string\r\n  createdAt: number\r\n}\r\n\r\ntype ContextProps = {\r\n  entries: Entry[]\r\n  updateEntry: (entry: Entry) => void\r\n  addNewEntry: (entry: Entry) => void\r\n  saveEntriesToState: (entries: Entry[]) => void\r\n}\r\n\r\nexport const EntriesContext = createContext({} as ContextProps)\r\n", "import { useReducer } from \"react\"\r\nimport { EntriesContext, entriesReducer } from \"./\"\r\nimport type { Entry } from \"./EntriesContext\"\r\n\r\nexport interface EntriesState {\r\n  entries: Entry[]\r\n}\r\n\r\nconst entries_INITIAL_STATE: EntriesState = {\r\n  entries: [],\r\n}\r\n\r\ntype Props = {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const EntriesProvider = ({ children }: Props) => {\r\n  const [state, dispatch] = useReducer(entriesReducer, entries_INITIAL_STATE);\r\n\r\n  // actions\r\n  // saveEntriesToState\r\n  const saveEntriesToState = async (entries: Entry[]) => {\r\n    dispatch({ type: \"GET_ENTRIES\", payload: entries });\r\n  };\r\n\r\n  // const updateEntriesToState = async (entries: Entry[]) => {\r\n  //   dispatch({ type: \"UPDATE_ENTRIES\", payload: entries })\r\n  // }\r\n\r\n  // create a new entry\r\n  const addNewEntry = (entry: Entry) => {\r\n    dispatch({ type: \"ADD_ENTRY\", payload: entry });\r\n  };\r\n\r\n  // update an entry\r\n  const updateEntry = (entry: Entry) => {\r\n    dispatch({\r\n      type: \"UPDATE_ENTRY\",\r\n      payload: {\r\n        ...entry,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <EntriesContext.Provider\r\n      value={{\r\n        ...state,\r\n        updateEntry,\r\n        addNewEntry,\r\n        saveEntriesToState,\r\n      }}\r\n    >\r\n      {children}\r\n    </EntriesContext.Provider>\r\n  );\r\n};\r\n", "import { Entry } from \"./EntriesContext\"\r\nimport { EntriesState } from \"./EntriesProvider\"\r\n\r\ntype EntriesAction =\r\n  | {\r\n      type: \"UPDATE_ENTRY\"\r\n      payload: Entry\r\n    }\r\n  | {\r\n      type: \"ADD_ENTRY\"\r\n      payload: Entry\r\n    }\r\n  | {\r\n      type: \"GET_ENTRIES\"\r\n      payload: Entry[]\r\n    }\r\n\r\nexport const entriesReducer = (state: EntriesState, action: EntriesAction) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_ENTRY\":\r\n      return {\r\n        ...state,\r\n        entries: state.entries.map((entry) => {\r\n          return {\r\n            ...entry,\r\n            status:\r\n              entry._id === action.payload._id\r\n                ? action.payload.status\r\n                : entry.status,\r\n          }\r\n        }),\r\n      }\r\n    case \"ADD_ENTRY\":\r\n      return {\r\n        ...state,\r\n        entries: [...state.entries, action.payload],\r\n      }\r\n    case \"GET_ENTRIES\":\r\n      return {\r\n        ...state,\r\n        entries: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n", "import {\r\n  Heading,\r\n  Container,\r\n  Stack,\r\n  Button,\r\n  Textarea,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport { Radio, RadioGroup } from \"@chakra-ui/react\";\r\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport { useState } from \"react\";\r\nimport EntryModel from \"../../models/Entry\";\r\nimport { dbConnect } from \"~/utils/db\";\r\nimport { dbDisconnect } from \"../../utils/db\";\r\nimport type { Entry } from \"~/context/entries\";\r\n\r\nexport const action: ActionFunction = async ({ request, params }) => {\r\n  const formData = await request.formData();\r\n\r\n  await dbConnect();\r\n\r\n  const _action = formData.get(\"_action\") as string;\r\n  if (_action === \"update\") {\r\n    const { id } = params;\r\n    const status = formData.get(\"status\") as string;\r\n    const description = formData.get(\"description\") as string;\r\n\r\n    if (description.length === 0) {\r\n      return {\r\n        msg: \"Description is required\",\r\n      };\r\n    }\r\n\r\n    const entryUpdated = {\r\n      status,\r\n      description: description.trim(),\r\n    };\r\n\r\n    await EntryModel.findByIdAndUpdate(id, {\r\n      ...entryUpdated,\r\n    });\r\n  }\r\n  if (_action === \"delete\") {\r\n    const { id } = params;\r\n    await EntryModel.findByIdAndDelete(id);\r\n  }\r\n\r\n  await dbDisconnect();\r\n\r\n  return redirect(`/`);\r\n};\r\n\r\ntype LoaderData = {\r\n  entry: Entry;\r\n};\r\n\r\nexport const loader: LoaderFunction = async ({ params }) => {\r\n  const { id } = params;\r\n  await dbConnect();\r\n  const entry = await EntryModel.findById(id).lean();\r\n  await dbDisconnect();\r\n  return { entry };\r\n};\r\n\r\nexport default function EntryPage() {\r\n  const { entry } = useLoaderData<LoaderData>();\r\n\r\n  const [status, setStatus] = useState(entry.status);\r\n  const [inputDescription, setInputDescription] = useState(entry.description);\r\n  return (\r\n    <Container\r\n      maxW=\"container.xl\"\r\n      // p=\"4\"\r\n      borderRadius=\"8\"\r\n      display=\"grid\"\r\n      placeItems=\"center\"\r\n      minH=\"calc(100vh - 140px)\"\r\n      bg=\"blackAlpha.600\"\r\n      mt=\"4\"\r\n    >\r\n      <Form\r\n        method=\"post\"\r\n        style={{\r\n          backgroundColor: \"black\",\r\n          borderRadius: \"8px\",\r\n          padding: \"10px\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Heading>Entry Page</Heading>\r\n        <Textarea\r\n          placeholder=\"description\"\r\n          my=\"4\"\r\n          onChange={(e) => setInputDescription(e.target.value)}\r\n          name=\"description\"\r\n          autoComplete=\"off\"\r\n          value={inputDescription}\r\n          height=\"200px\"\r\n        />\r\n        <RadioGroup onChange={setStatus} value={status} name=\"status\">\r\n          <Stack direction=\"row\">\r\n            <Radio value=\"pending\">Pending </Radio>\r\n            <Radio value=\"in-progress\">In progress</Radio>\r\n            <Radio value=\"finished\">Finished</Radio>\r\n          </Stack>\r\n        </RadioGroup>\r\n        <Stack>\r\n          <Button type=\"submit\" mt=\"4\" value=\"update\" name=\"_action\">\r\n            Update: Actualizar\r\n          </Button>\r\n        </Stack>\r\n        <Box width=\"100%\" marginTop=\"4\">\r\n          <Form method=\"post\">\r\n            <Button\r\n              bg=\"red.600\"\r\n              type=\"submit\"\r\n              name=\"_action\"\r\n              value=\"delete\"\r\n              width=\"100%\"\r\n            >\r\n              Delete - Eliminar\r\n            </Button>\r\n          </Form>\r\n        </Box>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n", "import { Schema, models, model } from \"mongoose\"\r\nimport type { Entry } from \"../context/entries/EntriesContext\"\r\n\r\ntype EntryTypeMongoDB = Entry\r\n\r\nconst EntrySchema = new Schema({\r\n  description: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: {\r\n      values: [\"pending\", \"in-progress\", \"finished\"],\r\n      message: \"{VALUE} no es un estado permitido\",\r\n    },\r\n    default: \"pending\",\r\n  },\r\n  createdAt: {\r\n    type: Number,\r\n    default: Date.now(),\r\n  },\r\n})\r\n\r\nconst EntryModel =\r\n  models.Entry ?? model<EntryTypeMongoDB>(\"Entry\", EntrySchema)\r\n\r\nexport default EntryModel\r\n", "import mongoose from \"mongoose\"\r\n\r\n/* \r\n  0 - disconnected\r\n  1 - connected\r\n  2 - connecting\r\n  3 - disconnecting\r\n  4 - uninitialized\r\n*/\r\nconst mongoConnection = {\r\n  isConnected: 0,\r\n}\r\n\r\nexport const dbConnect = async () => {\r\n  console.log(\"process.env.MONGO_URL\", process.env.MONGO_URL)\r\n  if (mongoConnection.isConnected === 1) {\r\n    console.log(\"ya estabamos conectados\")\r\n    return\r\n  }\r\n\r\n  if (mongoose.connections.length > 0) {\r\n    mongoConnection.isConnected = mongoose.connections[0].readyState\r\n    if (mongoConnection.isConnected === 1) {\r\n      console.log(\"usando conexion existente\")\r\n      return\r\n    }\r\n\r\n    await mongoose.disconnect()\r\n  }\r\n  await mongoose.connect(process.env.MONGO_URL ?? \"\")\r\n  mongoConnection.isConnected = 1\r\n  console.log(\"conectado a mongodb\", process.env.MONGO_URL ?? \"\")\r\n}\r\n\r\nexport const dbDisconnect = async () => {\r\n  if (process.env.NODE_ENV === \"development\") return\r\n  if (mongoConnection.isConnected === 0) return\r\n\r\n  await mongoose.disconnect()\r\n  mongoConnection.isConnected = 0\r\n  console.log(\"desconectado de mongodb\")\r\n}\r\n", "/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { EntryList } from \"~/components/entries\";\r\nimport { Grid } from \"@chakra-ui/react\";\r\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\r\nimport { useLoaderData, useActionData } from \"@remix-run/react\";\r\nimport { dbConnect, dbDisconnect } from \"~/utils/db\";\r\nimport EntryModel from \"~/models/Entry\";\r\nimport { EntriesContext } from \"../context/entries/EntriesContext\";\r\nimport type { Entry } from \"../context/entries/EntriesContext\";\r\nimport { useContext, useEffect } from \"react\";\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n  console.log(\"actionnnn \uD83E\uDD95\");\r\n  const formData = await request.formData();\r\n\r\n  const _action = formData.get(\"_action\") as string;\r\n\r\n  await dbConnect();\r\n  if (_action === \"create\") {\r\n    const description = formData.get(\"description\") as string;\r\n    if (description.length === 0) {\r\n      return {\r\n        msg: \"the name is required\",\r\n      };\r\n    }\r\n    const newEntry = new EntryModel({\r\n      description,\r\n    });\r\n    await newEntry.save();\r\n  }\r\n  if (_action === \"update\") {\r\n    const id = formData.get(\"_id\") as string;\r\n    const status = formData.get(\"status\") as string;\r\n    await EntryModel.findByIdAndUpdate(id, {\r\n      status,\r\n    });\r\n  }\r\n\r\n  await dbDisconnect();\r\n\r\n  return {\r\n    status: \"ok\",\r\n    msg: \"Action executed\",\r\n  };\r\n};\r\n\r\nexport const loader: LoaderFunction = async () => {\r\n  await dbConnect();\r\n  const entries = (await EntryModel.find().lean()) as Entry[];\r\n  await dbDisconnect();\r\n\r\n  return entries;\r\n};\r\n\r\nexport default function Index() {\r\n  const entries = useLoaderData<Entry[]>();\r\n  const { saveEntriesToState } = useContext(EntriesContext);\r\n  const actionData = useActionData<{\r\n    msg: string;\r\n  }>();\r\n\r\n  useEffect(() => {\r\n    saveEntriesToState(entries);\r\n  }, [entries]);\r\n\r\n  return (\r\n    <Grid\r\n      templateColumns={{\r\n        base: \"1fr\",\r\n        md: \"repeat(2, 1fr)\",\r\n        lg: \"repeat(3, 1fr)\",\r\n      }}\r\n      gap={6}\r\n      p=\"4\"\r\n      as=\"section\"\r\n    >\r\n      <EntryList status=\"pending\" msg={actionData?.msg} />\r\n      <EntryList status=\"in-progress\" />\r\n      <EntryList status=\"finished\" />\r\n    </Grid>\r\n  );\r\n}\r\n", "import { Box, Button, Heading, Input, Stack, Text } from \"@chakra-ui/react\";\r\nimport { useContext, useRef, useState, useEffect } from \"react\";\r\nimport type { DragEvent } from \"react\";\r\nimport EntryCard from \"./EntryCard\";\r\nimport { EntriesContext } from \"../../context/entries/EntriesContext\";\r\nimport { Form, useFetcher, useTransition } from \"@remix-run/react\";\r\ntype Props = {\r\n  status: string;\r\n  msg?: string;\r\n};\r\n\r\nconst EntryList = ({ status, msg }: Props) => {\r\n  const { entries } = useContext(EntriesContext);\r\n  const [buttonAdd, setButtonAdd] = useState(false);\r\n\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  const transition = useTransition();\r\n  const fetcher = useFetcher();\r\n\r\n  // when the user drop the element do this\r\n  const handleDrop = (e: DragEvent<HTMLDivElement>) => {\r\n    const id = e.dataTransfer.getData(\"text/plain\");\r\n    const entry = entries.find((entry) => entry._id === id)!;\r\n    // console.log({ ...entry, status })\r\n\r\n    // submit like a form to update in my database every time the status changes\r\n    fetcher.submit(\r\n      {\r\n        _id: entry._id,\r\n        status: status,\r\n        _action: \"update\",\r\n      },\r\n      {\r\n        method: \"post\",\r\n        action: \"?index\",\r\n      }\r\n    );\r\n\r\n    // updateEntry({ ...entry, status })\r\n  };\r\n\r\n  const filteredEntries = entries.filter((entry) => entry.status === status);\r\n\r\n  const isAdding =\r\n    transition.state === \"submitting\" &&\r\n    transition.submission.formData.get(\"_action\") === \"create\";\r\n\r\n  useEffect(() => {\r\n    if (!isAdding) {\r\n      formRef.current?.reset();\r\n    }\r\n  }, [isAdding]);\r\n\r\n  return (\r\n    <Box\r\n      as=\"section\"\r\n      bg=\"blackAlpha.600\"\r\n      minH=\"calc(100vh - 110px)\"\r\n      borderRadius=\"8px\"\r\n      px=\"2\"\r\n      py=\"2\"\r\n    >\r\n      <Heading m=\"4\">{status}</Heading>\r\n      {!buttonAdd && status === \"pending\" && (\r\n        <Stack spacing={3} px=\"2\" py=\"2\">\r\n          <Button onClick={() => setButtonAdd(true)}>Agregar Entrada</Button>\r\n        </Stack>\r\n      )}\r\n\r\n      {buttonAdd && (\r\n        <Form ref={formRef} method=\"post\" onSubmit={() => setButtonAdd(false)}>\r\n          <Stack spacing={3} px=\"2\" py=\"2\">\r\n            <Input\r\n              placeholder=\"Agregar Entrada\"\r\n              name=\"description\"\r\n              autoComplete=\"off\"\r\n            />\r\n            <Text color=\"red.500\">{msg}</Text>\r\n\r\n            <Button type=\"submit\" name=\"_action\" value=\"create\">\r\n              Agregar Entrada\r\n            </Button>\r\n          </Stack>\r\n        </Form>\r\n      )}\r\n      <section onDrop={handleDrop} onDragOver={(e) => e.preventDefault()}>\r\n        <Box\r\n          bg=\"gray.900\"\r\n          minH=\"calc(100vh - 200px)\"\r\n          overflowY=\"scroll\"\r\n          px=\"2\"\r\n          py=\"2\"\r\n        >\r\n          {filteredEntries.map((entry) => {\r\n            return <EntryCard key={entry._id} entry={entry} />;\r\n          })}\r\n        </Box>\r\n      </section>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EntryList;\r\n", "import { Box } from \"@chakra-ui/react\"\r\nimport type { Entry } from \"../../context/entries/EntriesContext\"\r\nimport type { DragEvent } from \"react\"\r\nimport { useFetcher, useNavigate } from \"@remix-run/react\";\r\n\r\ntype Props = {\r\n  entry: Entry\r\n}\r\n\r\nconst EntryCard = ({ entry }: Props) => {\r\n  const fetcher = useFetcher()\r\n  const navigate = useNavigate()\r\n  const handleDragStart = (e: DragEvent<HTMLDivElement>) => {\r\n    e.dataTransfer.setData(\"text/plain\", entry._id)\r\n  }\r\n  const handleDragEnd = (e: DragEvent<HTMLDivElement>) => {\r\n    console.log(\"drag end :DD\")\r\n    fetcher.submit(\r\n      { _id: entry._id, status: entry.status },\r\n      {\r\n        method: \"post\",\r\n        action: \"?index\",\r\n      }\r\n    )\r\n  }\r\n\r\n  const handleClick = () => {\r\n    navigate(`/entry/${entry._id}`)\r\n  }\r\n  return (\r\n    <>\r\n      <Box\r\n        bg=\"blackAlpha.600\"\r\n        p=\"4\"\r\n        minH={110}\r\n        draggable\r\n        cursor=\"pointer\"\r\n        borderRadius={4}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n        mb=\"2\"\r\n        onClick={handleClick}\r\n      >\r\n        {entry.description}\r\n      </Box>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EntryCard\r\n", "export default {'version':'e1fd2730','entry':{'module':'/build/entry.client-7TORHREB.js','imports':['/build/_shared/chunk-RJ52LRU4.js','/build/_shared/chunk-ZDL36WOY.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-ULAIFVEJ.js','imports':['/build/_shared/chunk-RTC5ZIPJ.js','/build/_shared/chunk-Y42FCFZ4.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/entry/$id':{'id':'routes/entry/$id','parentId':'root','path':'entry/:id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/entry/$id-RQA7FSHD.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-QQUZ6QHQ.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-E1FD2730.js'};", "\nimport * as entryServer from \"C:\\\\Users\\\\tree\\\\Desktop\\\\jira-remix-app\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"C:\\\\Users\\\\tree\\\\Desktop\\\\jira-remix-app\\\\app\\\\root.tsx\";\nimport * as route1 from \"C:\\\\Users\\\\tree\\\\Desktop\\\\jira-remix-app\\\\app\\\\routes\\\\entry\\\\$id.tsx\";\nimport * as route2 from \"C:\\\\Users\\\\tree\\\\Desktop\\\\jira-remix-app\\\\app\\\\routes\\\\index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/entry/$id\": {\n      id: \"routes/entry/$id\",\n      parentId: \"root\",\n      path: \"entry/:id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    }\n  };"],
  "mappings": "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",
  "names": []
}
